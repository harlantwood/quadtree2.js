/*
 * - quadtree2 0.0.1
 * - Two dimensional quadtree for regions and collision detection.
 * - by Burning Gramma <burninggramma@gmail.com>
 * - https://github.com/burninggramma/quadtree2.js
 * --------------------------------------------
 * built on 2014-01-25
*/
var injector=function(a,b){return"undefined"!=typeof module&&"object"==typeof module.exports?b():a()},Vec2=injector(function(){if(!window.Vec2)throw new Error("Vec2 is a requirement");return window.Vec2},function(){return require("vec2")}),Quadtree2;Quadtree2=function(a,b){var c,d={p:"pos_",r:"rad_",R:"rot_",id:!1},e={isNumber:function(a){if("number"!=typeof a)throw new Error("NaN - not a Number")},isString:function(){if("string"!=typeof val)throw new Error("NaS - not a String")},isVec2:function(a){if("object"!=typeof a||!(a instanceof Vec2))throw new Error("NaV - not a Vec2")},isDefined:function(a){if(void 0===a)throw new Error("ND - not defined")},isObject:function(a){if("object"!=typeof a)throw new Error("NaO - not an Object")},hasKey:function(a,b){if(-1===Object.keys(a).indexOf(b))throw new Error("HNK - has no key: "+b)},byCallbackObject:function(a,b,c){var d;for(d in b)b[d](void 0!==c?a[c[d]]:a[d])}},f={map_:{},count_:0,ids_:0,meta_:{shapes:{}}},g={data:{necessary:{size_:e.isVec2,limit_:e.isNumber}},k:{necessary:{p:e.isVec2},circle:{necessary:{r:e.isNumber}},rect:{necessary:{R:e.isNumber}}}},h={nextId:function(){return++f.ids_},init:function(){e.byCallbackObject(f,g.data.necessary)},checkInit:function(a){return a&&!f.inited_&&h.init(),f.inited_},checkObjectKeys:function(a){e.isDefined(a),e.isObject(a),e.byCallbackObject(a,g.k.necessary,d),d.id&&e.isNumber(a[d.id])}},i={getLimit:function(){return f.limit_},setLimit:function(a){void 0!==a&&(e.isNumber(a),f.limit_=a)},getCount:function(){return f.count_},setObjectKey:function(a,b){e.hasKey(d,a),e.isString(d,b),d[a]=b},getSize:function(){return f.size_.clone()},setSize:function(a){void 0!==a&&(e.isVec2(a),f.size_=a.clone())},addObject:function(a){h.checkInit(!0),h.checkObjectKeys(a),f.count_++}};for(c in i)this[c]=i[c];this.setSize(a),this.setLimit(b)},injector(function(){window.Quadtree2=Quadtree2},function(){module.exports=Quadtree2});